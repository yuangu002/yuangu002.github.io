<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-06-17T02:30:51-07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Yuan Gu</title><subtitle>Carpe Diem, Seize the Day</subtitle><entry><title type="html">什么是 AI 时代的高效工程师？</title><link href="http://localhost:4000/software-engineer-thoughts/" rel="alternate" type="text/html" title="什么是 AI 时代的高效工程师？" /><published>2024-05-16T00:00:00-07:00</published><updated>2024-05-16T00:00:00-07:00</updated><id>http://localhost:4000/swe-future</id><content type="html" xml:base="http://localhost:4000/software-engineer-thoughts/">&lt;p&gt;想了很久的标题，既不想具体到个人的工作体验，也不想对 AI 做一些空洞的预言。于是引经据典，借用之前写过书评的 &lt;a href=&quot;/effective-engineer&quot;&gt;Effective Engineer&lt;/a&gt;，随便聊一聊这两年对软工行业的思考、经历、和认知。&lt;/p&gt;

&lt;p&gt;不成体系，笑骂由人。&lt;/p&gt;

&lt;p&gt;我是个对新事物非常谨慎的人，也许在这一点上并不适合做程序员。我算是大模型很早期的体验者，在 ChatGPT 出来之前的一年，我就用 GPT-3 的 API 写过一些基础课的作业（按要求写 SQL 语句之类的）。但总体来说非常浅薄，停留在对新技术猎奇的阶段。2023年3月，某个学历史的朋友来三蕃找我玩，大吹特吹 AI 如何改变了他的工作流程。我嘴上简单质疑了一句大模型目前看不到像广告这么成熟的商业模式，心里暗自得意，觉得这是文科生才会担心的问题，作为谷歌工程师，我的工作目前看很安全。&lt;/p&gt;

&lt;p&gt;一周之后，GPT-4发布，llama 开源，微软集成了 copilot，谷歌推出了 bard。&lt;/p&gt;

&lt;p&gt;一年之后，我准备跳槽，发现劳工市场和两年前已经发生了剧变。2024年3月，股市创下新高，但招聘市场非常冷淡，面试一份基础后端的工作都会有10年经验被裁的程序员来竞争，谷歌2023年1月那一波被裁员的人到现在还没找到同级别同薪水的工作。简单的观察就是，市场预期很好，但是公司好像不需要招很多人来维持预期。&lt;/p&gt;

&lt;p&gt;带着对这位朋友的歉意，我写下这篇文章，认真回答他当年的问题：作为一个工程师，我如何定义“未来有意义的工作”？&lt;/p&gt;

&lt;h2 id=&quot;ai-是对通用智能的抽象&quot;&gt;AI 是对通用智能的抽象&lt;/h2&gt;
&lt;p&gt;还在 CMU 读研的时候，我就在很多门课上听到一个共同的概念：抽象 (Abstraction)。操作系统是对计算机架构的抽象，云计算是对分布式资源的抽象，数据库是对文件系统的抽象，TCP/IP 是对信号的抽象…几乎每一节软件系统相关的课，最后的主题都会归结于抽象。上班之后，我对抽象有了更深的理解：MapReduce, Spanner, TensorFlow, 这些谷歌工程师的杰作，就是对各自商业问题的抽象。&lt;/p&gt;

&lt;p&gt;简单解释，就是接口的使用者，不需要、更不应该理解接口内部的实现。以我所在的安卓部门来说，应用工程师不需要理解 Android framework 的实现，framework 工程师不需要理解内核或者虚拟机的实现。他们只需要理解本领域内需要解决的问题，就可以使用下游的抽象进行开发。一个出色的软件开发者，就是用好下游的接口，做好自身商业问题的抽象，让上游变成使用其接口的白痴。&lt;/p&gt;

&lt;p&gt;那 AI 是什么？大模型是对&lt;strong&gt;通用知识&lt;/strong&gt;的抽象，机器人/自动驾驶是对&lt;strong&gt;物理世界&lt;/strong&gt;的抽象。对工程师来讲，AI 的发展，&lt;strong&gt;会进一步封装每一层的抽象，会最小化每一层对其上下游的依赖&lt;/strong&gt;，甚至于连最后一步 – 用代码把商业问题抽象出来 – 也可以被自然语言所取代。&lt;/p&gt;

&lt;p&gt;如果我解释的很难懂，用陆奇老师的话说：大模型让获取智能的成本降低到几乎为零。而且这是一个不可逆转的过程，当人们习惯了谷歌地图的便利，没有人再回去买一张三美金的地图；同样，当人们认为大模型能给出比搜索更可靠更方便的结果，没有人会回到充满广告的搜索引擎。至于广告，他只是一种分蛋糕的把戏，只要蛋糕越做越大，在分蛋糕的问题上，后世子孙比我们更有智慧。&lt;/p&gt;

&lt;h2 id=&quot;高效工程师是高质量的私有数据&quot;&gt;高效工程师是高质量的私有数据&lt;/h2&gt;
&lt;p&gt;接着抽象的概念往下想，那么工程师和 AI 的关系是什么？用大模型的话说，工程师的专业知识是帮助基础模型做 &lt;a href=&quot;https://blogs.nvidia.com/blog/what-is-retrieval-augmented-generation/&quot;&gt;RAG&lt;/a&gt; 的私有数据。用通俗的话说，工程师和其他职业的门槛会越变越模糊，如果说有一个共同点，那就是对某个商业问题要有深刻理解，实现商业问题的编程语言可以是 assembly，也可以是英语。&lt;/p&gt;

&lt;p&gt;接下来可能是一个争议很大的观点，那就是我们经常说的 “generalist SWE”（通才软件工程师）会逐渐走进历史。大模型叫 foundation model 不是没有道理的，前面说过，基础模型是对通用知识的抽象，工程师的价值在于提供通用知识之外的见解，比如对某个传统行业的理解，比如基于模型的反馈进而做出的判断，又或者做一个某项专利技术的提供商。在 AI 发展的过程中，工程师会更多地体现团队里其他角色的技能，比如产品、营销、甚至法务，而不会再像今天一样，一个团队需要几个专门写不同模块代码的工程师：前端、后端、云端集成， etc. 注意，我并不是说 AI 能直接生成这些代码，而是在 AI 的帮助下，不同模块之间的“粘合”成本越来越低，低到一个应届毕业生即可胜任，毕竟软工里大部分的知识，都是通用知识。&lt;/p&gt;

&lt;p&gt;举个例子吧，10年前（2014年左右）的后端开发还是一个相对混沌的领域，对后端工程师要求很高，每个问题几乎都没有很统一的解决方案。比如 auto-scaling、数据库读写性能优化、防止 DDOS 攻击这些经典问题，那个时候你还需要写代码去自定义或者自己找开源方案。现在这些问题全都被集成到了云厂商的控制面板里，花点钱点点界面上的按钮就行了，甚至像一些不常想到的参数设置，还没等开发者意识到，有的云厂商就在后台帮你自动优化了。这就是一个抽象程度越变越高的问题：做到最后，你只需要懂你的 “business” 就足够了。&lt;/p&gt;

&lt;p&gt;最近看课代表和 Howie 徐老师做的一期访谈也是深有感触，就是 90% 的公司和 90% 的员工都在做着无意义的工作。以前的硅谷大厂有一个潜规则，就是公司与其让他们跑到竞争对手那里，不如花点钱招进来，安排一些意义不大的工作。但现在看来这个理论不是那么有说服力了，首先 Elon 裁了 Twitter 的 80%，Google/Meta 都裁了几轮，但并没有对 business 造成任何影响。虽然 Sundar 不可能像 Elon 那么疯狂，但把意义不大的维护工作外包给中国或者印度已经是共识了，班加罗尔的房价都因此涨了不少。&lt;/p&gt;

&lt;p&gt;高效的工程师，就是找到那 10% 真正有意义、值得思考、可以产生杠杆级影响力的问题，然后在解决它的过程中不断学习、持续迭代。&lt;/p&gt;

&lt;p&gt;成为创业者 (entrepreneur)，而不是技师（technician）。&lt;/p&gt;

&lt;h2 id=&quot;ai-时代是个体户时代&quot;&gt;AI 时代是个体户时代&lt;/h2&gt;
&lt;p&gt;每个人都是开发者，每个开发者都是一支创业团队。&lt;/p&gt;

&lt;p&gt;如果观察中国互联网最成功的巨头，阿里和字节做的事情非常类似，就是让每个普通人都能成为创业者。马云说让天下没有难做的生意，张一鸣说让每个人都有表达的平台和观众，本质都是提供一个高度抽象的平台，让创业成本越来越低、研发流程越来越敏捷、生态系统越来越成熟。AI 对智能的抽象，会促使工程师加速研发周期，找到真正有意义的问题，然后调用下游的接口解决它。&lt;/p&gt;

&lt;p&gt;那大公司做什么？一是平台和基础设施的搭建，二是和高校一起资助科研，这就是陆奇提到过的 “科学家 + 创业者” 的模式。所以大模型只是前菜，也许个性化才是 AI 的潜在价值。这种价值通过赋予个体前所未有的创造力，甚至可以进一步解构社会强权或集体意志。当然，这是留给社会学家的问题。&lt;/p&gt;

&lt;p&gt;一些常见的刻舟求剑思维：其实都是我过去的思维，无意影射别人。&lt;/p&gt;
&lt;h3 id=&quot;好像-ai-没法做到-xxx那我去卷这个吧&quot;&gt;好像 AI 没法做到 XXX，那我去卷这个吧&lt;/h3&gt;
&lt;p&gt;几乎在过去的一年里，我都处于一种“对抗”的思维中：如何和 AI 竞争？如何去做 AI 没法做到的事情？这其实是一种很典型的东亚思维，就是我要赢、我要不可取代、我要拥有“核心竞争力”，并且这是一场零和游戏：我不仅要赢，我还要踩在别人的脑袋上赢 (成为“人上人”)。其实看过这两年 AI 进展的人都会有感受，就是你没办法竞争，只能合作共赢，因为现在看来 AI 不可能完成的事情，可能做一些微调，甚至改一些提示词就可以完成。Sam 之前讲过 “不要想着去做 GPT-4 目前无法完成的事情，因为在 GPT-5 出现之后，你做的一切工作将变得毫无意义”。作为 AI 的上游，你不应该想着如何和 AI 比较，而是假设 AI 已经足够强大，你能如何利用这个接口？你将如何在这个生态系统里定义你的 business？&lt;/p&gt;

&lt;h3 id=&quot;留在大公司听安排反正大公司也不会倒&quot;&gt;留在大公司听安排，反正大公司也不会倒&lt;/h3&gt;
&lt;p&gt;这确实是一种选择，公司肯定还是需要很多人去维护升级各种抽象的平台，科研方面，无论是大模型还是机器人，都需要科学家去做理论创新。但是我们要想清楚，这究竟是我们主动的选择，还是随波逐流的无奈之举？如果是后者，至少在 Google，根本不需要 18 万人去做平台的抽象工作，因为无论是哪一种抽象的系统，平台使用者都远远多于平台研发者。安卓的 Core OS 团队不到 500 个工程师，就撑起了将近 500 万的安卓应用。&lt;/p&gt;

&lt;p&gt;说了这么多技术，用一些宏大的词藻来结尾吧。不只是工程师，其实大多数人忙忙碌碌、终其一生，回头看可能什么都没有留下。但不客气地讲，工程师又总是最傲慢、最脱不下长衫、最沉迷于雕虫小技的职业。有时候从技术中脱离出来，停止 justify 那些由社会或组织强加的意义，问问自己的内心，你解决了什么问题？&lt;/p&gt;

&lt;p&gt;马斯克说 Twitter 是个 glorified activist organization（草台班子？），虽然难听，但深以为然。&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Yuan @ Google MTV&lt;br /&gt;
05/16/2024, the last day @ Android&lt;/p&gt;</content><author><name></name></author><category term="career" /><category term="ai" /><category term="interview" /><category term="zh" /><summary type="html">想了很久的标题，既不想具体到个人的工作体验，也不想对 AI 做一些空洞的预言。于是引经据典，借用之前写过书评的 Effective Engineer，随便聊一聊这两年对软工行业的思考、经历、和认知。</summary></entry><entry><title type="html">【红色赌盘】在这里，读懂中国</title><link href="http://localhost:4000/red-roulette/" rel="alternate" type="text/html" title="【红色赌盘】在这里，读懂中国" /><published>2023-08-14T00:00:00-07:00</published><updated>2023-08-14T00:00:00-07:00</updated><id>http://localhost:4000/red-roulette</id><content type="html" xml:base="http://localhost:4000/red-roulette/">&lt;p&gt;&lt;strong&gt;Disclaimer：1. 请不要在中国大陆的网络上传播。2. 我对“具体的某官员做了某事/找了某小三”没有一点兴趣，所有的八卦都跳过了。&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;这个世界从来没有岁月静好过，有的只是血淋淋的真相、颠覆认知的事实、和战争结束后散落在地的空壳子弹，从不以个人意志的好恶而转移。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;2019年六月，我在美国东海岸的一个小镇读夏校，期盼可以提前一年毕业，并试图换取一封暑研教授的推荐信。尽管高中时候被老师斥责“自由散漫”、“不服管教”，我从不是个爱讨论国际大事的人。我认为，学好计算机，考上研究生，然后去大公司上班，过着“岁月静好”的生活，这一切都是被安排好的、成功者的路。我的人生应该由我来推进，不是我的父母，更不是国际风云。大二选了计算机专业，我跟从事金融业的父母说：“因为这样，可以离你们的光环远一点”。&lt;/p&gt;

&lt;p&gt;那时候有朋友在微信上试探地问我：“你知道香港的事情了吗？”。我是知道大概的，连续几天校园里出现了香港游行的海报，中国学生会“代表“也和校园报刊有过一些论战。但我只是回复道：“没太关注，相信国家会处理好吧。”&lt;/p&gt;

&lt;p&gt;四年之后，中国贸易战升级、国安法落地、疫情爆发、封城、俄乌战争、经济下行，而我也在那条安排好的路上越走越远：我提前毕了业，搬到了湾区，成为了一名谷歌的软件工程师。但我好像也越走越偏：因为中美航班熔断和 28 天的隔离政策，我连续两年没有回国，和在国内的女朋友远程分了手，再回去时已经失去了很多国内朋友的联系。2022年3月，我赶在上海封城之前回美国，&lt;a href=&quot;/bye-shanghai&quot;&gt;在机场写下了一些情绪&lt;/a&gt;，感叹世事的无常。&lt;/p&gt;

&lt;p&gt;我意识到，如果你想做更大的事情，你必须要贪婪地了解这个世界的真相，即使他们有时候不那么赏心悦目。&lt;/p&gt;

&lt;p&gt;我对信息的鉴别越来越敏感了，尤其是有关中国的信息，我不再满足于官方过分简单的叙事，我开始挖掘那些守口如瓶、但又至关重要的历史事件或处事原则：2019年的香港到底发生了什么？香港人的诉求有哪些？国安法是不是违反了“50年不变”的承诺？整治互联网和教培之后，中国经济的增长点在哪里？作为没有绿卡的中国人，还能不能像过去在中美之间游刃有余？&lt;/p&gt;

&lt;p&gt;《红色轮盘》讲了一个真实、黑暗、却也激动人心的“中国故事”：从一无所有到亿万富豪，一个香港海归用了不到二十年跻身中国上流社会，甚至被孙政才特批成为北京政协委员。他叫沈栋，他的前妻叫段伟红，是温家宝家族的“管家”，再通过和权贵子女攀上关系，在北京建立了一个集房地产开发、机场货运、和私募基金的庞大商业版图。在书里，沈栋毫不避讳和中国红色权贵交易时需要做出的妥协，维持关系时的虚伪，和权力斗争里冷血的本质。比起“不远万里来上学的非洲留学生”，这个“中国故事”显得更真实立体。作者在采访的时候说：“在这场追逐财富的游戏里，要赢得这场赌博，和权贵分享财富 is the only way out。至于你要不要玩这个游戏，你有你的选择，我只希望我的故事能让你做出更理性的决策。”&lt;/p&gt;

&lt;p&gt;用了不到两周，我在欧洲度假之余读完了这本书，很多叙述也交叉印证了我近几年的观察：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;中国政治经济：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;每一个在中国的生意人都是权力的”白手套“，在某些时刻，你不得不培养与权力部门的关系、并和他们分享利润或进行交易。&lt;/li&gt;
  &lt;li&gt;中国的商业法律没有黑白，只有灰色，最终的解读权利归共产党所有，而不是人民法院。中国商人只能选择在灰色地带跳舞，并且说服权力和你一起跳舞。&lt;/li&gt;
  &lt;li&gt;新时代反腐运动的目的是打击政治上的不同山头，从而巩固权力，腐败只是一个“让人民觉得无法接受”的借口，因为改革开放之后法制不健全，每个高干 (副部及以上) 都不干净，只是程度不同而已。&lt;/li&gt;
  &lt;li&gt;建国之来，政府对资本的容忍程度取决于“资本能否为共产党巩固权力”，而不是”资本能为社会创造的价值“。曾经这两者基本是重合的，成就了南巡之后将近20年的黄金时代。&lt;/li&gt;
  &lt;li&gt;改革开放给了私营企业喘息之机，但目的是为了给一个破产的国有经济体系输血。“三个代表”的理论创新在”试图把资本家纳入共产党的体系“，但并不成功，因为从始至终政府没有信任过民间资本，如果民间资本的力量对党的领导构成威胁，政府再以”监管“的名义割韭菜。&lt;/li&gt;
  &lt;li&gt;由于政府不信任资本，中国的生意基本都是短线生意，赚了钱就卖，然后重新投资到新项目，一直循环。&lt;/li&gt;
  &lt;li&gt;2008 年经济危机之后，中国的领导层开始建立自信，认为中国的制度比西方资本主义更优越，对民间资本开始打压，2012 年之后只是加速而已。&lt;/li&gt;
  &lt;li&gt;党纪和国法是分开的，中央纪检委处理党内事务，凌驾于国家法律之上。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;个人发展：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;做生意：在你有热情的领域、发现问题、解决问题、探索出一条可持续的商业模式，简单说就是在你睡觉的时候这个模式也能产生利润。&lt;/li&gt;
  &lt;li&gt;企业管理：对事情集权，对人放权。做决定要亲力亲为，具体实施尽量信任下属。&lt;/li&gt;
  &lt;li&gt;财富管理：分散投资，分层投资。奢侈品的目的不能只是享受。&lt;/li&gt;
  &lt;li&gt;“关系”：拉关系的本质是建立信任，增加谈资，形成自己的人脉网络，在别人的需求说出之前就给出offer，实现资源共享。&lt;/li&gt;
  &lt;li&gt;家庭：三观契合/底层逻辑一致是家庭幸福的必要条件，但感情可以起到润滑剂的作用，即使士气低落的时候也可以做缓冲。&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="books" /><category term="politics" /><category term="history" /><category term="china" /><category term="zh" /><summary type="html">Disclaimer：1. 请不要在中国大陆的网络上传播。2. 我对“具体的某官员做了某事/找了某小三”没有一点兴趣，所有的八卦都跳过了。</summary></entry><entry><title type="html">I-140 被批准后如何回国和归海</title><link href="http://localhost:4000/h1b-gc-china/" rel="alternate" type="text/html" title="I-140 被批准后如何回国和归海" /><published>2023-07-02T00:00:00-07:00</published><updated>2023-07-02T00:00:00-07:00</updated><id>http://localhost:4000/h1b-gc-china</id><content type="html" xml:base="http://localhost:4000/h1b-gc-china/">&lt;p&gt;在网上陆陆续续看到了一些讲解，总感觉比较零碎。在此整理一些关于&lt;strong&gt;等绿卡排期期间如何长期回国再返美&lt;/strong&gt;的 FAQ，本文仅适用于以下前提：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;你的 I-140 申请已经被批准。&lt;/li&gt;
  &lt;li&gt;有 H1B 身份。&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;在以上前提下，我如果回国工作，H1B和绿卡排期是否自动失效？
    &lt;ul&gt;
      &lt;li&gt;绿卡排期仍然有效。I-140 批准意味着绿卡排期（PD）被锁定，你可以理解为去餐厅吃饭，你不想在餐厅门口等位，于是你要了一张票然后去干别的。等到“叫号”你再回去，这样就不用重新排队。这里拿到 I-140 等于你拿到了票，等到你的 PD current，移民局会“叫号”说你该回来申请 485 了，所以你可以在国内等排期。&lt;/li&gt;
      &lt;li&gt;H1B 看你怎么理解，你仍然拥有 H1B 身份（你不用再抽签了），但是因为 H1B 身份的有效性和美国雇主 (e.g. Google) 有一一对应的关系，也就是常说必须有美国公司愿意 sponsor 你，所以如果你辞掉了美国 Google 的工作（不管你回不回国），两个月 grace period 之后 H1B 都会自动失效。但是失效了不意味着身份彻底没了，等你有一天想返美的时候，你只需要&lt;strong&gt;重新激活&lt;/strong&gt;这张 H1B。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;如何重新激活H1B？
&lt;br /&gt;
一点背景：H1B 只要抽中，有效期 6 年（先发三年再续三年），6年之后，如果你已经在 6 年到期之前的 365 天递交了 PERM 或 140 的申请（但没拿到 140），你可以&lt;strong&gt;一年一年地&lt;/strong&gt;申请延期。如果你拿到 140 了，一次可以申请延期三年。回国期间时间不算 6 年内。
    &lt;ul&gt;
      &lt;li&gt;找一家愿意 sponsor 你的美国公司，跟 HR 说你有 H1B 身份，只需要办 H1B transfer。&lt;/li&gt;
      &lt;li&gt;面试，拿 offer，在国内签 H1B。&lt;/li&gt;
      &lt;li&gt;尽量找能远程面试的，因为如果需要去美国面试，虽然可以申请B签入境，但由于你的 140 被批准了，意味着你有移民倾向，这违背了 B/F 签的 non-immigrant intent 的政策，所以可能被拒签。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;除了H1B我还能怎么回来？
    &lt;ul&gt;
      &lt;li&gt;去国内外企，干一年然后申请 L1（看机会，听说不太好操作）&lt;/li&gt;
      &lt;li&gt;结婚&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;我还在国内，PD current 了怎么办？
    &lt;ul&gt;
      &lt;li&gt;按理说 PD current 后你交不交 485 申请应该问题不大（地里很多 dp 自己搜），但是官网上也提到如果一年不回复的话有风险会丢 PD，具体情况涉及到很多其他因素（PERM/140情况等），所以咨询律师比较靠谱。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;回美国后？
    &lt;ul&gt;
      &lt;li&gt;继续用之前的 PD，重新走流程申请 PERM/140。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;最大的 bottleneck 是：目前（2023）很难找到愿意直接从国内面试你的公司。&lt;/strong&gt;&lt;/p&gt;</content><author><name></name></author><category term="life" /><category term="china" /><category term="zh" /><summary type="html">在网上陆陆续续看到了一些讲解，总感觉比较零碎。在此整理一些关于等绿卡排期期间如何长期回国再返美的 FAQ，本文仅适用于以下前提： 你的 I-140 申请已经被批准。 有 H1B 身份。</summary></entry><entry><title type="html">[Effective Engineer] Long-term Value (Part 3)</title><link href="http://localhost:4000/effective-engineer-3/" rel="alternate" type="text/html" title="[Effective Engineer] Long-term Value (Part 3)" /><published>2023-04-03T00:00:00-07:00</published><updated>2023-04-03T00:00:00-07:00</updated><id>http://localhost:4000/effective-engineer-3</id><content type="html" xml:base="http://localhost:4000/effective-engineer-3/">&lt;p&gt;A continuation of &lt;a href=&quot;/effective-engineer-2&quot;&gt;[Effective Engineer] Execution (Part 2)&lt;/a&gt;, this article of the series summarizes how to build long-term values over time.&lt;/p&gt;

&lt;h2 id=&quot;chapter-8-balance-quality-with-pragmatism&quot;&gt;[Chapter 8] Balance quality with pragmatism&lt;/h2&gt;
&lt;p&gt;The chapter discusses how to make tradeoffs between engineering quality and business reality in a variety of practices.&lt;/p&gt;
&lt;h3 id=&quot;code-review&quot;&gt;Code review&lt;/h3&gt;
&lt;p&gt;Pros:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Help identify bugs and design shortcoming early on.&lt;/li&gt;
  &lt;li&gt;Hold engineers accountable for any code change.&lt;/li&gt;
  &lt;li&gt;Set a positive model of good code by institutionalizing knowledge and conventions.&lt;/li&gt;
  &lt;li&gt;Foster shared ownership of code.&lt;/li&gt;
  &lt;li&gt;Better quality enables long-term development agility -&amp;gt; faster iteration speed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tradeoff:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It might harm short-term productivity under deadline pressure.&lt;/li&gt;
  &lt;li&gt;Only review core functionality logic.&lt;/li&gt;
  &lt;li&gt;Enforce automatec lint checking for coding style.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;abstractions-infrastructure&quot;&gt;Abstractions (infrastructure)&lt;/h3&gt;
&lt;p&gt;Pros:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Good infra only exposes a simple interface and abstracts away the underlying complexity, which makes developers focus on the core business logic.&lt;/li&gt;
  &lt;li&gt;Foster a more scalable, maintenance, and extensible codebase.&lt;/li&gt;
  &lt;li&gt;Don’t repeat yourself (DRY).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tradeoff:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It takes time to build a &lt;strong&gt;generic&lt;/strong&gt; abstraction.&lt;/li&gt;
  &lt;li&gt;Focus on building abstractions for core functionalities.&lt;/li&gt;
  &lt;li&gt;Don’t overinvest: don’t create infra until you &lt;strong&gt;generalize the problem&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What makes a good infra?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Easy to learn and use even without documentations&lt;/li&gt;
  &lt;li&gt;Hard to misuse.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;automated-testing&quot;&gt;Automated testing&lt;/h3&gt;
&lt;p&gt;Extensive unit tests + a few integration tests.&lt;/p&gt;

&lt;p&gt;Pros:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Smooth out error spikes after launch and reduce overall error rates by validating quality of new code and safeguarding old code against regression.&lt;/li&gt;
  &lt;li&gt;Make big code change confident.&lt;/li&gt;
  &lt;li&gt;In case of code break, it’s quick to identify who is accountable.&lt;/li&gt;
  &lt;li&gt;It’s the best documentation of how the original author intended to use the code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tradeoff:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Don’t be obsess with 100% test coverage rate.&lt;/li&gt;
  &lt;li&gt;Balance it with iteration speed&lt;/li&gt;
  &lt;li&gt;Focus on high-leverage tests on core functionalities.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;repay-tech-debt&quot;&gt;Repay tech debt&lt;/h3&gt;
&lt;p&gt;Tech debt: deferred work that’s necessary to improve code health and quality.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Incur tech debt when necessary to adapt to the business reality.&lt;/li&gt;
  &lt;li&gt;Repay the debt periodically: set up a dedicated period of time once in a while.&lt;/li&gt;
  &lt;li&gt;Focus on core codebase in the finite time.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;chapter-9-minimize-operation-burden&quot;&gt;[Chapter 9] Minimize operation burden&lt;/h2&gt;
&lt;p&gt;What is operation burden?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Keep system up and running (deployment).&lt;/li&gt;
  &lt;li&gt;Keep up with trendy technologies like programming language or databases.&lt;/li&gt;
  &lt;li&gt;Scale the service to more users.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;embrace-operational-simplicity&quot;&gt;Embrace operational simplicity&lt;/h3&gt;
&lt;p&gt;A complex system:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;introduces cross-functional team communication overheads.&lt;/li&gt;
  &lt;li&gt;introduces single point of failure (SPOF).&lt;/li&gt;
  &lt;li&gt;is hard to have new hires ramp up.&lt;/li&gt;
  &lt;li&gt;is hard to maintain its infra, which might be developed by xfn teams.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Instead, do the simple thing first.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It’s okay to experiment with new technologies/infra, but think twice before productionizing it.&lt;/li&gt;
  &lt;li&gt;Most of the time, choose the more reliable and stable option, which has been well tested.&lt;/li&gt;
  &lt;li&gt;Don’t blindly scale the design to the distributed setting, which might not be necessary.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;build-systems-that-fail-fast&quot;&gt;Build systems that fail fast&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;In case of any issue occurs, fails it immediately and visibly.&lt;/li&gt;
  &lt;li&gt;Don’t use workaround to delay or propogate failures.&lt;/li&gt;
  &lt;li&gt;Crash for the engineers, but handle it gracefully for end users.&lt;/li&gt;
  &lt;li&gt;Examples include: validating input arguments early on, bubbling up exceptions returned by an external service, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;automate-mechanical-tasks&quot;&gt;Automate mechanical tasks&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Pay an upfront cost to automate tasks rather than patching a manual fix.&lt;/li&gt;
  &lt;li&gt;However, it’s much harder to automate decision-making (reasoning process) than mechanics (a sequence of actions).&lt;/li&gt;
  &lt;li&gt;Prefer automating mechanics and leave decision-making as later manual work.&lt;/li&gt;
  &lt;li&gt;The recent progress in LLMs might be a good alternative to automate the decision-making process?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;make-batch-processes-idempotent&quot;&gt;Make batch processes idempotent&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Make each action/process in the sequence produce the same result, no matter the process runs just once, or mnay times.&lt;/li&gt;
  &lt;li&gt;If not processed in a idempotent way, a failed action might leave side effects on subsequence actions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;plan-and-recover-from-failures-quickly&quot;&gt;Plan and recover from failures quickly&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Many big tech companies periodically run “chaos test”, which simulates data center failures to attest the recoverability of their systems.&lt;/li&gt;
  &lt;li&gt;“Scripting for success”: make an exhaustive plan on each potential scenario rather than trying to prevent failures from happening at the first place.&lt;/li&gt;
  &lt;li&gt;The ability to plan and recover from failures can minimize the team’s pressure to a controllable level. Otherwise, the team can waste time on panicking and firefighting operational burden.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;chapter-10-invest-in-teams-growth&quot;&gt;[Chapter 10] Invest in team’s growth&lt;/h2&gt;
&lt;h3 id=&quot;prioritize-hiring&quot;&gt;Prioritize hiring&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Especially true for startup, because it’s very likely the new hire will be on your immediately team.&lt;/li&gt;
  &lt;li&gt;Very high-leverage activity: if you spend 2 hours per day for 20 days to secure a strong hire, your 40 hours can produce 2000 hours or more work by the new hire.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;design-an-effective-interview-process&quot;&gt;Design an effective interview process&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Technical screening on candidates.&lt;/li&gt;
  &lt;li&gt;A good opportunity to advertise the team mission and culture to candidates.&lt;/li&gt;
  &lt;li&gt;Optimize for questions with high signal-to-noise ratio: the question that can reveal useful information about the candidates (&lt;em&gt;signal&lt;/em&gt;), with little irrelevant data (&lt;em&gt;noise&lt;/em&gt;).&lt;/li&gt;
  &lt;li&gt;Keep the interview pace to maintain a high signal-to-noise ratio: give hints at appropriate timing so that candidates won’t be get stuck or sidetracked cluelessly.&lt;/li&gt;
  &lt;li&gt;Design questions with multiple layers of difficulty and easy to add or remove layer depending on real-time feedback from candidates.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;design-an-onboarding-process&quot;&gt;Design an onboarding process&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Direct new hires to learning and activities that are more aligned with the team’s priorities.&lt;/li&gt;
  &lt;li&gt;The candidate’s initial impression on the team is critical because &lt;strong&gt;learning compounds.&lt;/strong&gt; The sooner they can ramp up, more &lt;strong&gt;exponentially&lt;/strong&gt; effective they can be over time, which makes you and the team better in the long run.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;a-few-specfic-onboarding-activities&quot;&gt;A few specfic onboarding activities&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Codelab - user guide for abstractions.&lt;/li&gt;
  &lt;li&gt;Schedule onboarding talks on engineering practices and key abstractions.&lt;/li&gt;
  &lt;li&gt;Set up 1:1 mentorship program.&lt;/li&gt;
  &lt;li&gt;Have senior engineers design starter tasks for junior engineers to experience e2e development workflow ASAP.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;shared-ownership-of-code&quot;&gt;Shared ownership of code&lt;/h3&gt;
&lt;p&gt;If a senior engineer is the sole bottleneck on a module, they will lose the flexibility to work on other more high-leverage features than bug fix and maintenance. For junior engineers, they can use the shared ownership to ramp up quickly on the codebase.&lt;/p&gt;

&lt;p&gt;How to establish such shared ownership?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Code &amp;amp; design review.&lt;/li&gt;
  &lt;li&gt;Rotate roles and tasks for all teammates.&lt;/li&gt;
  &lt;li&gt;Document everything, including high-level design, code-level comments, and any specific workaround solutions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;build-collective-wisdom-via-post-mortems&quot;&gt;Build collective wisdom via post-mortems&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;It’s not to assign blame; it’s to identify better solutions next time -&amp;gt; scripting for success.&lt;/li&gt;
  &lt;li&gt;Make the emotional investment to hold an intellectually honest conversation.&lt;/li&gt;
  &lt;li&gt;Keep open-minded and receptive to feedbacks, even they are disturbing.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="books" /><category term="tech-career" /><category term="productivity" /><summary type="html">A continuation of [Effective Engineer] Execution (Part 2), this article of the series summarizes how to build long-term values over time.</summary></entry><entry><title type="html">2022, I ain’t worried</title><link href="http://localhost:4000/2022/" rel="alternate" type="text/html" title="2022, I ain’t worried" /><published>2023-01-01T00:00:00-08:00</published><updated>2023-01-01T00:00:00-08:00</updated><id>http://localhost:4000/i-aint-worried</id><content type="html" xml:base="http://localhost:4000/2022/">&lt;p&gt;简单写个年终总结吧，作为一个春蕾杯连续五年得主，比起创作代码，传统的文字更适合我去表达。&lt;/p&gt;

&lt;p&gt;不觉得自己是个能欣赏音乐的人，除了 2019 年听过一些 MGK 的 diss track，我的歌单里几乎没有英文歌，但 OneRepublic 却是个例外：今年的 I ain’t worried 又成了我最喜欢的新歌。2022，用这首歌来概括，再合适不过了。&lt;/p&gt;

&lt;p&gt;从高中开始，我就是个挺内耗的人，一直在寻找安全感，寻找他人的认同和理解。我会去买很多不会看的书，会跟风去看热门的电影，会沾沾自喜地跟同学说：“我从不得罪任何人”，并且以此为荣。甚至考标化和申请大学，都不是因为前途，而是因为大家都这么做，家长都这样说，仅此而已。&lt;/p&gt;

&lt;p&gt;这种假模假式的装逼心态一直持续到了大一，那会儿 Kevin 正好来北大读夏校，在洋人专属的豪华宿舍里，趁着 debug CS 241 的间隙，我们聊了很多话题，关于未来，关于理想，也关于威玛。阴差阳错地，对于 career 本没有任何 ambition 的我突然意识到，我这人生的头 19 年就像《李白》歌词里唱的：“写写诗逗逗女孩儿”。我觉得很空洞，我觉得碌碌无为；我想要看到更大的世界，那里一定会有更有意义的事业等着我去完成。&lt;/p&gt;

&lt;p&gt;从那以后，我就像变了个人一样，在偏执和猜忌中度过了人生中蜕变的两年：大一暑假入门 CS，大二暑假 declare 双专业，大三上申请研究生，大三下毕业…所有的光环，我都想去追逐；所有别人说“太快了，你做不到”的事情，我都想去证明。&lt;a href=&quot;/2019&quot;&gt;2019 年&lt;/a&gt;，我对未来的焦虑也达到了顶峰，以至于在收到 CMU 录取的那天凌晨，我一下子瘫倒在 steeplechase 的房间里，没有笑，也没有哭，只是不停地喊着一些 non-sense。Kevin 问我怎么了？我说一切都结束了，我终于可以骄傲地离开了。那些发过的誓，熬过的夜，喝过的红牛，顿时都有了价值。&lt;/p&gt;

&lt;p&gt;不过威玛至少教会了我一件事情，就是不想再“堆笑脸”，做一个“老好人“了。自我价值的实现过程，本身就是一件非常酷的事情，那种满足感，那种自信心，那种驱动力，比任何人的眼光都更踏实。可能我是个晚熟的人吧，直到 21 岁才明白这么简单的道理。&lt;/p&gt;

&lt;p&gt;按理说 CMU 应该是个更内卷的地方，但&lt;a href=&quot;/cmu-master&quot;&gt;硕士的一年半&lt;/a&gt;，我曾经的焦虑感逐渐地退却了。因为在 CMU，我感受到了这种久违的踏实。我看到了目标，我也看到了差距，但我一点都不内耗了，因为我很自信我一定可以做到，step by step。&lt;/p&gt;

&lt;p&gt;然后就是 2022 了，这是我初中之后过的最轻松的一年。有时候会加班，也有时候说走就走出去玩儿，剩下的时候看书、写博客、打球、减肥…一切都很自然，很踏实。有朋友问我 Google 裁员了怎么办，我说无所谓，顾源还会怕养不活自己吗？&lt;/p&gt;

&lt;p&gt;前一段时间看林书豪的一个采访，他说在勇士的时候是最难的，因为还没有证明过自己，你必须要打出好的表现才能有下一次上场的机会，所以压力很大。但林疯狂之后，打球就很从容了，因为不用想着再去证明什么了。&lt;/p&gt;

&lt;p&gt;2022, I ain’t worried no more. &lt;br /&gt;
2023, to see more, to experience more, and to achieve more.&lt;/p&gt;

&lt;p&gt;Keep looking. Don’t settle.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Yuan&lt;/p&gt;</content><author><name></name></author><category term="new-year" /><category term="memory" /><category term="high-school" /><category term="undergrad" /><category term="zh" /><summary type="html">简单写个年终总结吧，作为一个春蕾杯连续五年得主，比起创作代码，传统的文字更适合我去表达。</summary></entry><entry><title type="html">[Effective Engineer] Execution (Part 2)</title><link href="http://localhost:4000/effective-engineer-2/" rel="alternate" type="text/html" title="[Effective Engineer] Execution (Part 2)" /><published>2022-10-29T00:00:00-07:00</published><updated>2022-10-29T00:00:00-07:00</updated><id>http://localhost:4000/effective-engineer-2</id><content type="html" xml:base="http://localhost:4000/effective-engineer-2/">&lt;p&gt;A continuation of &lt;a href=&quot;/effective-engineer&quot;&gt;[Effective Engineer] Mindset (Part 1)&lt;/a&gt;, this article of the series focuses on execution techniques that help enforce those mindsets.&lt;/p&gt;

&lt;h2 id=&quot;chapter-4-accelerate-iteration-speed&quot;&gt;[Chapter 4] Accelerate iteration speed&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;The faster you can iterate, the more that you can learn what works and what doesn’t.&lt;/li&gt;
  &lt;li&gt;Because learning compounds, the sooner you iterate fast, the faster your learning rate is.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;continuous-deployment&quot;&gt;Continuous Deployment&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Help engineers make small, incremental changes rather than large features.&lt;/li&gt;
  &lt;li&gt;When making small changes, it helps trace down bugs and enforce fine-grained A/B testing.&lt;/li&gt;
  &lt;li&gt;Gated large feature behind a configuration flag.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;investing-in-time-saving-tools&quot;&gt;Investing in time-saving tools.&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Faster compilation cycle shorten the validation loops when writing code.&lt;/li&gt;
  &lt;li&gt;Using REPL (read-eval-print loop) to verify expressions in an interactive programming environment.&lt;/li&gt;
  &lt;li&gt;Invest in those tools early on with a potential upfront cost rather than pay the tax every iteration.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;shorten-debugging-and-validation-loop&quot;&gt;Shorten debugging and validation loop&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Make a minimal, reproducible test case that triggers the bugs with only necessary configs.&lt;/li&gt;
  &lt;li&gt;Test and debug with a tight feedback loop.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;master-programming-environment&quot;&gt;Master programming environment&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Get proficient with text editors and IDE (code reformatting, navigating, version control, etc).&lt;/li&gt;
  &lt;li&gt;Be expert in at least one high-level language with powerful built-in abstractions (Python over Java, C/C++).&lt;/li&gt;
  &lt;li&gt;Get familiar with Linux shell commands.&lt;/li&gt;
  &lt;li&gt;Keyboard over mouse.&lt;/li&gt;
  &lt;li&gt;Run unit tests that only associated with your changes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;unblock-non-engineering-bottlenecks&quot;&gt;Unblock non-engineering bottlenecks&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Dependency upon other teams: overcommunicate to align with priorities.&lt;/li&gt;
  &lt;li&gt;How to obtain approval from senior leadership: use informal coffee chat/office hour to build relationship over time.&lt;/li&gt;
  &lt;li&gt;Review process from PM/legal: plan ahead.&lt;/li&gt;
  &lt;li&gt;Some of these are out of engineer’s control, so some companies set up the role of TPMs to help cross-team communications.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;chapter-5-measure-what-you-want-to-improve&quot;&gt;[Chapter 5] Measure what you want to improve&lt;/h2&gt;
&lt;p&gt;Engineers should relentlessly measure and quantify metrics to improve product quality.&lt;/p&gt;

&lt;h3 id=&quot;use-metrics-to-drive-progress&quot;&gt;Use metrics to drive progress&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Focus on right things. Metrics confirm that your product changes actually achieve your objectives.&lt;/li&gt;
  &lt;li&gt;Help guard against future regressions.&lt;/li&gt;
  &lt;li&gt;Drive forward progress. Make sure the thing that you are optimizing is going at the right direction.&lt;/li&gt;
  &lt;li&gt;Measure the effectiveness, compare the leverage against other activities, and prioritize accordingly. See &lt;a href=&quot;/effective-engineer&quot;&gt;prioritization&lt;/a&gt; section.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;pick-the-right-metrics&quot;&gt;Pick the right metrics&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Maximize impact: profit per &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; in economics, etc.&lt;/li&gt;
  &lt;li&gt;Actionable: use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rate/percentage&lt;/code&gt; over &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gross/total&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Responsive yet robust: Updates quickly enough to give feedback over a period of time. Example: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xxx&lt;/code&gt; over the last week is more responsive than over the last month, while more rebust than over the last hour.&lt;/li&gt;
  &lt;li&gt;In terms of team management, engineers can also pick some metrics over the other:
    &lt;ol&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Productivity per week&lt;/code&gt; over &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hours per week&lt;/code&gt;: Long working hours decreases productivity, resulting in “undertime”.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Outstanding bug fixed&lt;/code&gt; over &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Total bug fixed&lt;/code&gt;: Prioritize impactful bugs over trivial bugs.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;instrument-the-system&quot;&gt;Instrument the system&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Metric is top-level strategy; instrumentation is low-level implementation detail.&lt;/li&gt;
  &lt;li&gt;More instrumentations provides better visibility of the system.&lt;/li&gt;
  &lt;li&gt;Create dashboard to visualize instrumentations over time.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;internalize-common-numbers&quot;&gt;Internalize common numbers&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Keep the table at hand: &lt;a href=&quot;https://gist.github.com/jboner/2841832&quot;&gt;Latency numbers that every engineer should know.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;These back-of-the-envelop calculations can quickly estimate performance metrics of your design.&lt;/li&gt;
  &lt;li&gt;Help spot anomalies in data measurements.&lt;/li&gt;
  &lt;li&gt;Common useful numbers can benchmark your current design and scope for improvements.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;prioritize-data-integrity&quot;&gt;Prioritize data integrity&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Log the accurate, unbiased data. Wrong data is worse than no data.&lt;/li&gt;
  &lt;li&gt;Usually metrics-related code is less robust than feature code.&lt;/li&gt;
  &lt;li&gt;Be skeptical about data integrity: Data can get dropped in network traffic, bugs in data collection pipelines or dashboard, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;chapter-6-validate-ideas-early-and-often&quot;&gt;[Chapter 6] Validate ideas early and often&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Optimize for feedback ASAP helps get &lt;em&gt;right&lt;/em&gt; things done.&lt;/li&gt;
  &lt;li&gt;Resonate with a more recent idea: &lt;a href=&quot;https://publiclab.co/build-in-public&quot;&gt;build in public&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;find-low-effort-ways-to-validate-the-work&quot;&gt;Find low-effort ways to validate the work&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Identify the scariest, the riskiest, the most uncertain part of the project, and validate it first.&lt;/li&gt;
  &lt;li&gt;Build a MVP/prototype: the version of a product that allows a team to collect &lt;em&gt;maximum&lt;/em&gt; amount of &lt;em&gt;validated&lt;/em&gt; learning about customers with the &lt;em&gt;least&lt;/em&gt; effort.&lt;/li&gt;
  &lt;li&gt;The MVP can be creative. Dropbox “fakes” a placeholder button for Google account login and monitors its click-through rate, to validate whether the feature can gain tractions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;continuously-validate-product-changes-via-ab-testing&quot;&gt;Continuously validate product changes via A/B testing&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;A random subset of users see a change, while everyone else doesn’t.&lt;/li&gt;
  &lt;li&gt;Using variable control, A/B testing validates that any significant change in metrics can be solely attributed to the product change.&lt;/li&gt;
  &lt;li&gt;A/B testing turns the black box of of user behavior into understandable, actionable knowledge.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;beware-the-one-person-team&quot;&gt;Beware the one-person team&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Leverage design doc, code reviews, or informal coffee chat to keep other engineers aware of your progress.&lt;/li&gt;
  &lt;li&gt;Keep code changes small and incremental.&lt;/li&gt;
  &lt;li&gt;Design API interface/protobuf first to surface early issues.&lt;/li&gt;
  &lt;li&gt;Solicit buy-in with conversations for large features.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;build-feedback-loop-for-any-decision&quot;&gt;Build feedback loop for any decision&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Formulate a hypothesis, design an experiment to test it, define metrics, run the experiments, learn from the results.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;chapter-7-improve-project-estimation-skills&quot;&gt;[Chapter 7] Improve project estimation skills&lt;/h2&gt;

&lt;h3 id=&quot;use-accurate-estimates-to-drive-project-planning&quot;&gt;Use accurate estimates to drive project planning&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Keep the deadline constant and deliver what is possible.&lt;/li&gt;
  &lt;li&gt;Decompose the project into granular tasks.&lt;/li&gt;
  &lt;li&gt;Set a hard deadline for minimal delivery and an internal deadline for stretch goals.&lt;/li&gt;
  &lt;li&gt;While one engineer can finish one task, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt; engineers can’t deliver &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt; tasks with the same efficiency because of communication overhead, new hire ramp-up, etc.&lt;/li&gt;
  &lt;li&gt;Once you have an estimate, validate it against historical data.&lt;/li&gt;
  &lt;li&gt;Use timeboxing to restrict with open-ended tasks.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;budget-for-the-unknown&quot;&gt;Budget for the unknown&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;There are always uncertain problems that we fail to account for when estimating. Several minor yet unexpected tasks compound and wreak havoc with the schedule.&lt;/li&gt;
  &lt;li&gt;Separate effective work time from total calendar time, as many non-engineering duties may slip in. When setting schedules, build in buffer time for the unexpected interruptions.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1 engineering day = 2 calendar days&lt;/code&gt; is a ballpark benchmark.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;define-specific-goals-and-measurable-milestones&quot;&gt;Define specific goals and measurable milestones&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;A well-defined goal helps scope the project: separate must-haves from nice-to-haves.&lt;/li&gt;
  &lt;li&gt;It also builds clarity and alignment across key stakeholders.&lt;/li&gt;
  &lt;li&gt;A concrete milestone keeps the team honest and tracks current progress. Rather than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;almost done&lt;/code&gt;, a measurable milestone looks like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;features X, Y, Z by a completion date&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reduce-risks-early&quot;&gt;Reduce risks early&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;A common risk is system integration, where functional subsystems are integrated together but fails as a whole.&lt;/li&gt;
  &lt;li&gt;Build an end-to-end scaffolding (skeleton) and test it early on.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;dont-sprint-in-the-middle-of-marathon&quot;&gt;Don’t sprint in the middle of marathon&lt;/h3&gt;
&lt;h4 id=&quot;working-overtime-doesnt-produce-linear-impact&quot;&gt;Working overtime doesn’t produce linear impact&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Productivity decreases with additional hours worked&lt;/li&gt;
  &lt;li&gt;When you realize you can’t make the deadline, you are more behind schedule than you think, because you likely underestimated the entire projects, not just the previous months.&lt;/li&gt;
  &lt;li&gt;Working extra hours can burn out team members and hurt team morale.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;working-overtime-can-be-used-as-a-compromised-option-if-you&quot;&gt;Working overtime can be used as a compromised option, if you:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Communicate with the team on why working overtime is necessary.&lt;/li&gt;
  &lt;li&gt;Revise the plan and schedule to adapt to the new reality.&lt;/li&gt;
  &lt;li&gt;By any means, it’s not an excuse for not practicing project estimation skills.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Continue reading the next section: &lt;a href=&quot;/effective-engineer-3&quot;&gt;[Effective Engineer] Long-term Value (Part 3)&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="books" /><category term="tech-career" /><category term="productivity" /><summary type="html">A continuation of [Effective Engineer] Mindset (Part 1), this article of the series focuses on execution techniques that help enforce those mindsets.</summary></entry><entry><title type="html">24岁，祝我生日快乐</title><link href="http://localhost:4000/24/" rel="alternate" type="text/html" title="24岁，祝我生日快乐" /><published>2022-10-08T00:00:00-07:00</published><updated>2022-10-08T00:00:00-07:00</updated><id>http://localhost:4000/hbd</id><content type="html" xml:base="http://localhost:4000/24/">&lt;p&gt;这是我 18 岁之后，第一次给自己放个假过生日。&lt;/p&gt;

&lt;p&gt;尤其是 20 岁之后的这几年，我甚至开始刻意回避过生日这个话题了，因为每一次的生日，都在提醒自己又大了一岁。这种感觉，一年比一年压抑。&lt;/p&gt;

&lt;p&gt;但过去这一年，对我来说意义还是挺特殊的，我终于走出了校园，走进了职场，以一个从业者的角度去观察和思考互联网。我还记得大二的时候，Kevin 问我学计算机想做什么？我说我毕业之后想去 Google，学技术，拿绿卡，然后做一番事业。Kevin 说你知道 wm 有几个毕业就能进 Google 的（然后忽悠我跟他合伙创业，因为这样可以走 eb5 不用排期），我说不知道，但只要一届有一个人，那为什么不是我呢？大三申硕士的时候，Kevin 劝我再留一年，争取一个更好的结果，我说凭什么？我现在比哪个大四的差么？&lt;/p&gt;

&lt;p&gt;今天的我，不会再说这么少年轻狂的话了。23岁这一年，我终于放慢了脚步，试着去发现这些年太过匆忙而被遗忘了的 – “生活“。&lt;/p&gt;

&lt;p&gt;第一件事，就是回国了。自从武汉封城之后匆匆地离开了北京，整整两年都没回过家。去年秋招的时候压力太大，做梦都是回到了初中的那间教室，醒来说一定要回八中看一看。但等到终于回国，都已经走到南礼士路了，反而找不到回去的理由了。毕业快八年了，老师估计不认识几个了，同学也大多不在北京，于是转悠了几圈怅然若失地离开了。&lt;/p&gt;

&lt;p&gt;近乡情更怯，不敢问来人。&lt;/p&gt;

&lt;p&gt;另一个愿望就是去一次西藏，对西藏的兴趣起源于高中毕业那年的一部电影，叫《冈仁波齐》，我看完了电影就决定，一定要和最爱的人去一次西藏。这个愿望因为学业，疫情，找工作被拖了快五年，终于等到有时间了，我却不知道谁是那个最爱的人了。朴树的主题曲里写的：“只有奄奄一息过，那个真正的我，才能够诞生”。想想我这几年精致利己的嘴脸，去了西藏就真能找到 inner peace 吗？&lt;/p&gt;

&lt;p&gt;回国的两个多月，我不再去留恋高中那些未竟的，虚无缥缈的梦了，因为我清楚，当年认为重要的事情，如果没有去做，以后也不会再有心态去做了。而这次回国，我有着更现实的牵挂 – “家庭”。&lt;/p&gt;

&lt;p&gt;我突然变得温顺起来了，之前不屑于参加的饭局，回老家见亲戚朋友，甚至出门买菜，接送上下班这种 “柴米油盐” 的工作，我好像也不那么抵触了。听着老人念叨着 “去 Google 干什么，回来当个公务员稳当啊”，我也只是微笑着点头，因为我明白了，有的时候陪伴比事实重要得多。对于一个 100% INTJ 来说，还真是有些讽刺。&lt;/p&gt;

&lt;p&gt;第二个话题，围绕着重逢和告别。回来入职的这大半年，我在美国的飞行里程应该超过了学生时代的总和。我想去看看朋友（顺便吃一顿公司当地食堂），无论是一年一度的重逢，还是 ”可能是最后一面“ 的告别。对旅行费用这个东西，我已经相当不敏感了，既然投资不景气，那赚的钱还不如花出去买个开心，或者至少买一个 ”将来不会遗憾“。洛杉矶，西雅图，波士顿，DC，匹兹堡，芝加哥…，我想记录几个旅行的瞬间：&lt;/p&gt;

&lt;p&gt;在 LA 逛 USC 校园的时候，看到大一新生 move in，心里挺感慨的，wm 的 convocation 已经是五年前了，但那一天发生的事情还是那么清楚，好像我还停留在意气风发的 18 岁，穿过 sunken garden 喊着 go tribe。第一次来 USC 还是大一，走马观花地只记住了一个叫什么 tower 的宿舍，这次我坚持一定要再去看看这个 tower，看到之后却很失望，心里有点堵，因为解释不了我究竟在寻找什么。&lt;/p&gt;

&lt;p&gt;我从不是个信教的人。高二那年迷上了 Richard Dawkins，《自私的基因》、《上帝的错觉》、《盲眼钟表匠》，这三本书几乎确定了我这几年的无神论信仰。我认为把现世解释不了的烦恼都推给一个 “全知全能” 的 “神”，然后寄托给并不存在的来世，这违背了最基本的科学精神和启蒙思想。但在 UCLA，我见到了快三年没见的朋友，他告诉我他已经受洗，每周都要去教堂礼拜。作为一个坚定的无神论者，我竟然有些理解了他的选择：尽管我仍然相信科学能解释一切，但我们活着，难道真的要把每一个细节解释清楚吗？我现在倒认为，如果这几年有些事情糊涂一点，不明白就别明白了，至少我会过得更快乐些。&lt;/p&gt;

&lt;p&gt;九月份借着出差的机会回了趟匹兹堡，入职半年多，对工作已经没有了新鲜感，每天开会扯皮吹牛逼，反而又觉得当学生是一件很纯粹的事。当时随便在 slack 群里说了一句可以带学生 office tour，没想到一小时不到就收到了10+ requests，不得不分批处理。第二天我问学生，Google 有啥好的？给的也不算多最近还 layoff（此处省略一系列的吐槽…）。学生说，那可是我的 dream company 哦，我在印度的时候就 blahblahblah…。我才明白一切都是围城，眼前的学生们，不就是大二时候那个立志要 “年少有为” 的我么？只是没想到才过了半年，我就置身于另一个围城之内了。&lt;/p&gt;

&lt;p&gt;最后一个主题可能有点沉重，那就是危机感，说好听了是成熟，说难听点就是衰老。公司不再以一个学生或者 intern 的标准去管理你，你需要自己评估风险，做出规划，承担责任。五年前还警告我高中生不要早恋的亲戚，今年竟然已经说出 ”是时候考虑个人问题了“ 这种话。好像长大就是一瞬间的事情，昨天还谈论着诗词格律和风花雪月，今天就要考虑 H1B 去哪儿办首签。在篮球场上，我遇到了 18 岁之后最大的伤病 - jumpers knees。初中的时候，第一天磕了膝盖第二天继续打，连热身都不带做的。而现在每一次打球都要面对热身，冰敷，甚至 physical therapy 等等一系列的 bullshit。我意识到，当年觉得理所当然的馈赠，都在暗地里标好了价格。&lt;/p&gt;

&lt;p&gt;要起飞了，耳机里响起了经济舱，聪别说：生活不是竞技场。&lt;/p&gt;

&lt;p&gt;20岁，我祝自己年少有为；24岁，我祝自己生日快乐。&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Yuan @ Chicago ORD&lt;br /&gt;
2022/10/09&lt;/p&gt;</content><author><name></name></author><category term="birthday" /><category term="memory" /><category term="airport-writing" /><category term="zh" /><summary type="html">这是我 18 岁之后，第一次给自己放个假过生日。</summary></entry><entry><title type="html">[Effective Engineer] Mindset (Part 1)</title><link href="http://localhost:4000/effective-engineer/" rel="alternate" type="text/html" title="[Effective Engineer] Mindset (Part 1)" /><published>2022-07-15T00:00:00-07:00</published><updated>2022-07-15T00:00:00-07:00</updated><id>http://localhost:4000/effective-engineer</id><content type="html" xml:base="http://localhost:4000/effective-engineer/">&lt;p&gt;&lt;a href=&quot;https://www.effectiveengineer.com/book&quot;&gt;The Effective Engineer&lt;/a&gt;, written by Edmond Lau, is the Bible for software engineer. I summarize key points of this book (with minimal insights from me) and break it down into three major steps of practicing to become an effective engineer: adopting the right mindset, execute religiously, and build long-term value. This article is about part 1: the mindset.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: although a summary like this can help, I highly recommend reading it for more insights, as some examples in this book can inspire you to reflect your scenario at work.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“The best thing that you can do is not pretend that you know everything, but go into it with the mindset that your job is to learn as much as you can, as quickly as you can.” - Mark Zuckerberg&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;chapter-1-focus-on-high-leverage-activities&quot;&gt;[Chapter 1] Focus on high-leverage activities&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Maximize the &lt;strong&gt;“leverage”&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;A simple math equation: impact produced / time invested.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;how-to-measure-impact&quot;&gt;How to measure impact?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;For software engineers: getting things done (GTD).&lt;/li&gt;
  &lt;li&gt;Measured by metrics: product launch, bug fixes, important features, performance optimization, seek approval/alignment.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3-ways-to-increase-leverage&quot;&gt;3 ways to increase leverage&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Increase output/impact within a period of time.&lt;/li&gt;
  &lt;li&gt;Reduce invested time to do the same thing.&lt;/li&gt;
  &lt;li&gt;Focus on leverage points/high-leverage activities.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;questions-to-ask-for-any-activity&quot;&gt;Questions to ask for any activity&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;How to get more things done per time unit?&lt;/li&gt;
  &lt;li&gt;How to get things done faster?&lt;/li&gt;
  &lt;li&gt;Is there a more high-leverage activity to do instead?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;chapter-2-optimize-for-learning&quot;&gt;[Chapter 2] Optimize for learning&lt;/h2&gt;
&lt;h3 id=&quot;adopt-growth-mindset&quot;&gt;Adopt growth mindset&lt;/h3&gt;
&lt;h4 id=&quot;stretching-outside-the-comfort-zone&quot;&gt;Stretching outside the comfort zone&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Networking for introverts: practice how to tell a good story.&lt;/li&gt;
  &lt;li&gt;Dialogue with strangers is a learnable skills.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;own-your-story&quot;&gt;“own your story”&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Build your own story instead of telling other’s story.&lt;/li&gt;
  &lt;li&gt;Excited to solve the next problem, even though you don’t have any background before.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;invest-in-learning-rate&quot;&gt;Invest in learning rate&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Learning increases in an exponential rate, like compound interests.&lt;/li&gt;
  &lt;li&gt;Optimize for learning early on: a good first job -&amp;gt; a rapidly growing career.&lt;/li&gt;
  &lt;li&gt;Small delta increments: the point is about staying consistent and committed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;work-in-the-environment-conducive-for-learning&quot;&gt;Work in the environment conducive for learning&lt;/h3&gt;
&lt;p&gt;I am being extremely exhaustive on this section because it can be a checklist when I want to switch job. :)&lt;/p&gt;
&lt;h4 id=&quot;fast-growth&quot;&gt;Fast growth&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Growth on core metrics: DAU, CTR, user engagement/retention rate, etc.&lt;/li&gt;
  &lt;li&gt;Are you going to work on initiatives that are &lt;strong&gt;core&lt;/strong&gt; to the company growth?&lt;/li&gt;
  &lt;li&gt;Are they aggressively hiring over recent years?&lt;/li&gt;
  &lt;li&gt;How quickly for superstars grow to leadership positions?&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;training&quot;&gt;Training&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Is there onboarding/bootcamp period for new hire?&lt;/li&gt;
  &lt;li&gt;Is there formal/informal mentorship?&lt;/li&gt;
  &lt;li&gt;Willing to make long-term learning investment?&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;openness&quot;&gt;Openness&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Cross-team transparency: what are other teams working on?&lt;/li&gt;
  &lt;li&gt;Culture of curiosity: proactively ask questions, open knowledge sharing, value feedback, etc.&lt;/li&gt;
  &lt;li&gt;Reflect and document past mistakes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;pace&quot;&gt;Pace&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Moving fast and break things: “fast” defined by iteration speed.&lt;/li&gt;
  &lt;li&gt;Lightweight approval process.&lt;/li&gt;
  &lt;li&gt;Where to spend the majority of time: maintenance versus building new product/features?&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;people&quot;&gt;People&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Is the interviewer smarter than you?&lt;/li&gt;
  &lt;li&gt;Are interviews rigorous and comprehensive?&lt;/li&gt;
  &lt;li&gt;Meet with potential teammates beforehand: are they impressive?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;autonomy&quot;&gt;Autonomy&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Freedom to choose what to work on/how to do it?&lt;/li&gt;
  &lt;li&gt;Diversity of projects?&lt;/li&gt;
  &lt;li&gt;Engineer’s influence on product design &amp;amp; direction?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;leverage-work-opportunities-to-develop-your-technical-depth&quot;&gt;Leverage work opportunities to develop your technical depth&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;20% time at Google: take one-or-two hour per day instead of a full day.&lt;/li&gt;
  &lt;li&gt;Study codebase for classic software abstractions.&lt;/li&gt;
  &lt;li&gt;Internal educational materials.&lt;/li&gt;
  &lt;li&gt;Master your PL: at least one scripting language for quick prototyping.&lt;/li&gt;
  &lt;li&gt;Take courses of your weak points: professional degree, management science, MBA, etc.&lt;/li&gt;
  &lt;li&gt;Participate in design reviews that you are interested in.&lt;/li&gt;
  &lt;li&gt;At least a few senior members on the team.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;locate-learning-opportunities-outside-work&quot;&gt;Locate learning opportunities outside work&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Follow technical trends and learn skills with high demand.&lt;/li&gt;
  &lt;li&gt;Read books; attend talks/conferences; and write to teach.&lt;/li&gt;
  &lt;li&gt;Build a strong network of relationships: force yourself to meet people you don’t know.&lt;/li&gt;
  &lt;li&gt;Work on side projects.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;chapter-3-prioritize-regularly&quot;&gt;[Chapter 3] Prioritize regularly&lt;/h2&gt;
&lt;p&gt;Making prioritization as a routine means regularly identify/reidentify high-leverage activities.&lt;/p&gt;

&lt;p&gt;Never trust your brain to remember everything. Use checklist in whatever form, but the point is that &lt;strong&gt;you must write them down&lt;/strong&gt; and &lt;strong&gt;constantly reassess/reorganize them based on shifting priorities&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;what-should-be-prioed&quot;&gt;What should be prio’ed?&lt;/h3&gt;
&lt;h4 id=&quot;work-that-directly-produce-value&quot;&gt;Work that directly produce value&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Tasks that directly increases acquired users, sales, or impacts your team’s core business metrics.&lt;/li&gt;
  &lt;li&gt;Coding necessary features, seek PM approval for product launch, regular sync with teammates to avoid duplicate efforts, etc.&lt;/li&gt;
  &lt;li&gt;Only focus on what matters: say No to unnecessary meetings, coffee chat, small bugs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;important-but-non-urgent-tasks-identity-capital&quot;&gt;Important but non-urgent tasks (identity capital)&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Investment that make you more effective but without urgent deadlines: build relationships, learn programming tools/environments, personal development, practicing prioritization, etc.&lt;/li&gt;
  &lt;li&gt;Investment in identity capital can help you with important-and-urgent tasks with being more productive.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;how-to-execute-on-them&quot;&gt;How to execute on them?&lt;/h3&gt;
&lt;h4 id=&quot;protect-makers-schedule&quot;&gt;Protect maker’s schedule&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Block your calendar with long, continuous time slots for critical tasks, which enables you to enter the state of &lt;em&gt;flow&lt;/em&gt; (the effortless concentration).&lt;/li&gt;
  &lt;li&gt;Make your meetings back-to-back instead of fragmenting your schedule, which can reduce the context switch cost.&lt;/li&gt;
  &lt;li&gt;Set routines like “No meeting Wednesday”, “Focus Friday”, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;limit-work-in-progress-items&quot;&gt;Limit work-in-progress items&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Constant context switch between tasks hinder deep engagement of each one.&lt;/li&gt;
  &lt;li&gt;Human brain’s working memory can only &lt;em&gt;load&lt;/em&gt; 5-9 tasks on stage.&lt;/li&gt;
  &lt;li&gt;Use trial and error to find your &lt;em&gt;optimal number&lt;/em&gt; of WIPs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;make-it-a-habit-by-establishing-your-workflow&quot;&gt;Make it a habit by establishing your workflow&lt;/h3&gt;
&lt;h4 id=&quot;use-if-then-to-fight-procrastination&quot;&gt;Use if-then to fight procrastination&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Subconscious followup: If {conditions}, I will do {tasks}. This can prevent the moments that “I don’t feel like doing it” because the if condition subconsciously forces you to think the then-tasks are something that you need to do anyway.&lt;/li&gt;
  &lt;li&gt;To fill up small gaps: if I have 20 minutes, I will do {tasks}. So you won’t spend 10 minutes wondering what to do next and end up not finishing it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;build-your-own-routine-workflow-to-track-and-execute&quot;&gt;Build your own routine workflow to track and execute.&lt;/h4&gt;
&lt;p&gt;Edmond provides an example that beginners can start off with.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Divide your checklist to &lt;strong&gt;Doing&lt;/strong&gt;, &lt;strong&gt;Today&lt;/strong&gt;, and &lt;strong&gt;This week&lt;/strong&gt; sections.&lt;/li&gt;
  &lt;li&gt;Each item should have an ETA (estimated time to complete): use 25 minutes as a unit and mark each item with the estimated number of units.&lt;/li&gt;
  &lt;li&gt;Every morning, spend a few minutes planning: moving some items from &lt;strong&gt;This week&lt;/strong&gt; to &lt;strong&gt;Today&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;When you are free during the day or right before your “concentrated time block” starts, moving items from &lt;strong&gt;Today&lt;/strong&gt; to &lt;strong&gt;Doing&lt;/strong&gt;. Keep them short!&lt;/li&gt;
  &lt;li&gt;Monday morning/Sunday night, do a 30-minute review session to scope out &lt;strong&gt;This week&lt;/strong&gt; section for this week and retrospect on items that were not executed well in the last week.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Continue reading the next section: &lt;a href=&quot;/effective-engineer-2&quot;&gt;[Effective Engineer] Execution (Part 2)&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="books" /><category term="tech-career" /><category term="productivity" /><summary type="html">The Effective Engineer, written by Edmond Lau, is the Bible for software engineer. I summarize key points of this book (with minimal insights from me) and break it down into three major steps of practicing to become an effective engineer: adopting the right mindset, execute religiously, and build long-term value. This article is about part 1: the mindset.</summary></entry><entry><title type="html">起飞前随便写写</title><link href="http://localhost:4000/2022/06/19/random.html" rel="alternate" type="text/html" title="起飞前随便写写" /><published>2022-06-19T00:00:00-07:00</published><updated>2022-06-19T00:00:00-07:00</updated><id>http://localhost:4000/2022/06/19/random</id><content type="html" xml:base="http://localhost:4000/2022/06/19/random.html">&lt;p&gt;大一之后就像做了一场梦，时间过得已经没有了时间的概念，好像人生就只剩下了事业和证明，好像高中的梦想过于单纯，好像我没有选择过，只是被生活推着走，踽踽独行。&lt;/p&gt;

&lt;p&gt;上一次来波士顿是大一上学期的 final weeks，去 BU 和 Brandeis 找了朋友，final weeks 出来玩儿是因为在威廉斯堡快要炸了，找不到情绪的发泄出口。实话说那个时候很迷茫，不再想学IR了，可是也不确定要转什么专业，更不确定能不能学好计算机这种从来没有碰过的东西。&lt;/p&gt;

&lt;p&gt;而上一次去哈佛已经是七年前了，高一的暑假，第一次去美国。那个时候是跟旅行团走的，导游介绍哈佛的时候我听得很认真，1638 年建校，veritas 的含义，John Harvard 和胡适的故事，生怕错过了什么。&lt;/p&gt;

&lt;p&gt;这一次，我不会再 FOMO 了，也不会迷茫了，因为从大一之后，我好像找到了解决问题的固定模式，学不懂数学，那就去学计算机；找不到工作，那就去 cmu 混个 master；去不了 startup，那就去 Google。也就是说，我不会再像高中选本科那样没有主见，问来问去各方意见。现在我只会默默做决定，然后像运行算法一样去执行它。但同时，我也不会再保持好奇了，不会觉得“未来可期”了，用最近比较装逼的话说，就是失去了 serendipity 吧。&lt;/p&gt;

&lt;p&gt;昨天跟朋友喝酒时候说，高中总觉得日子太慢，可大学过得太快了，快到还觉得高中毕业就是前几天的事儿；今天另一个朋友说，23岁到30岁，看似漫长，其实过得更快，一眨眼就可能过去了。&lt;/p&gt;

&lt;p&gt;要起飞了，再见波士顿。&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Yuan @ Boston
2022/06/19&lt;/p&gt;</content><author><name></name></author><category term="memory" /><category term="airport-writing" /><category term="zh" /><summary type="html">大一之后就像做了一场梦，时间过得已经没有了时间的概念，好像人生就只剩下了事业和证明，好像高中的梦想过于单纯，好像我没有选择过，只是被生活推着走，踽踽独行。</summary></entry><entry><title type="html">又到了离开的时候</title><link href="http://localhost:4000/bye-shanghai/" rel="alternate" type="text/html" title="又到了离开的时候" /><published>2022-03-14T00:00:00-07:00</published><updated>2022-03-14T00:00:00-07:00</updated><id>http://localhost:4000/bye-shanghai</id><content type="html" xml:base="http://localhost:4000/bye-shanghai/">&lt;p&gt;我自认为我是相当没有仪式感的一个人，过年过节、过生日、实习、毕业、入职。。。人生种种的关键节点，从来没停下来 emo 过。但惟独每次要回美国的时候，在机场拥抱告别，看飞机滑行降落，心里总有一些话想说，大概这就是“多情自古伤离别”罢。&lt;/p&gt;

&lt;p&gt;第一次来上海是 2017 年，走马观花地还留着一些记忆，外滩、东方之珠、杜莎夫人、奥灶面、周边的几个小镇和园林，以及很困惑于上海的道路命名方式。但要说最深刻的，莫过于在机场买了一本李开复的《人工智能》。刚刚高中毕业的我，大学的专业是 undecided，高中最感兴趣的是世界历史，对计算机的了解程度嘛。。。这么讲，我当时都不知道怎么打开 terminal，于是我花了整整一晚上理解了什么是激活函数。虽然一知半解，但我还是很兴奋，并不是因为 ML 能赚多少钱，而是我想那个叫 sigma 的函数里一定蕴藏着神秘的力量，而 undecided major 可以带我去探索这些未知。&lt;/p&gt;

&lt;p&gt;五年后再次来上海，我已经硕士毕业，一周后就要入职 Google，做着五年前梦想过的那些探索。那个看似神秘的 sigma 函数，也仅仅是庞大神经网络里一个相对 trivial 的环节而已，对于我已经完全失去了探索的兴趣。我更不会再去机场买《人工智能》这种科普书，而是检查了好几遍护照、签证、EAD卡，和核酸证明，在这个动荡的大局势下，现实地有些讽刺。&lt;/p&gt;

&lt;p&gt;我开始回想，这五年我到底失去了什么？&lt;/p&gt;

&lt;p&gt;我曾经以为，自己拥有的东西都是理所当然的，家人永远不会老去，恋人永远不会疏远，朋友永远不会离开，好奇心永远不会磨灭。我的人生轨迹就是一个又一个确定的目标，然后不顾一切地为之努力，至于现在拥有的，都可以为了下一个目标而暂时牺牲掉。反过来想，我的每一个目标都不是深思熟虑的，也许是从众，也许是证明，也许是不甘人后，但一旦确定了，就像原教旨主义一样，疯狂到可以不择手段。&lt;/p&gt;

&lt;p&gt;我赢了，因为我成功地完成了每一个目标。我也输了，因为曾经拥有的，既然选择失去便是永恒。&lt;/p&gt;

&lt;p&gt;高中最爱看的电影是死亡诗社，我甚至把 Carpe Diem 当作座右铭写进了大学文书：“我将活在当下，用尽热情，燃烧生命，不求前程似锦，但求无愧于心”。很惭愧，不知不觉间，我背叛了当年的承诺，我变得越来越冷漠、刻薄，在二进制的游走中消磨着热情，开始把人生当作模型，把资源当作参数，在一次次透支的过程中优化自己的人生。&lt;/p&gt;

&lt;p&gt;23岁，我不奢求能找回失去的一切，只希望对工作保持一份好奇，对生活平添一缕烟火，对朋友给予一点真诚。同时，也立一个五年后回国发展的flag，不至于愧对家庭的那一份责任。&lt;/p&gt;

&lt;p&gt;Carpe Diem, 青春万岁。&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Yuan
2022.3.14 @ Shanghai&lt;/p&gt;</content><author><name></name></author><category term="memory" /><category term="airport-writing" /><category term="zh" /><summary type="html">我自认为我是相当没有仪式感的一个人，过年过节、过生日、实习、毕业、入职。。。人生种种的关键节点，从来没停下来 emo 过。但惟独每次要回美国的时候，在机场拥抱告别，看飞机滑行降落，心里总有一些话想说，大概这就是“多情自古伤离别”罢。</summary></entry></feed>